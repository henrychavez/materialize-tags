{"version":3,"sources":["materialize-tags.js"],"names":["$","tagClass","item","itemValue","toString","itemText","this","itemTitle","onTagExists","$tag","hide","fadeIn","TagsMaterialize","element","options","itemsArray","$element","objectItems","placeholderText","hasAttribute","attr","inputSize","Math","max","length","$container","$input","appendTo","$label","parent","find","before","build","on","addClass","next","focus","label","parents","hasClass","parentContainer","tags","removeClass","val","makeOptionItemFunction","key","propertyName","makeOptionFunction","value","htmlEncode","htmlEncodeContainer","text","html","doGetCaretPosition","oField","iCaretPos","document","selection","oSel","createRange","moveStart","selectionStart","keyCombinationInList","keyDownEvent","lookupList","found","each","index","keyCombination","which","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","defaultOptions","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","trimValue","allowDuplicates","deleteTagsOnBackspace","deleteTagsOnDeleteKey","MoveTagOnLeftArrow","MoveTagOnRightArrow","autoselect","CapitalizeFirstLetterOnly","prototype","constructor","add","dontPushVal","self","trim","charAt","toUpperCase","slice","match","tagName","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","data","findInputWrapper","after","blur","prop","$existingTag","filter","remove","other","beforeItemRemoveEvent","inArray","splice","siblings","first","removeAll","pop","refresh","contents","nodeType","nodeValue","map","typeahead","extend","typeaheadjs","typeaheadConfig","typeaheadDatasets","isArray","proxy","obj","datum","valueKey","event","removeAttr","target","$inputWrapper","prev","$prevTag","$nextTag","textLength","ceil","maxLengthReached","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","fn","materialtags","arg1","arg2","arg3","results","retVal","defaults","Constructor","window","jQuery"],"mappings":"CAAA,SAAWA,GAEP,YA6BA,SAASC,GAASC,GAEd,MAAO,OAGX,QAASC,GAAUD,GAEf,MAAOA,GAAOA,EAAKE,WAAaF,EAGpC,QAASG,GAASH,GAEd,MAAOI,MAAKH,UAAUD,GAG1B,QAASK,GAAUL,GAEf,MAAO,MAGX,QAASM,GAAYN,EAAMO,GAEvBA,EAAKC,OAAOC,SAehB,QAASC,GAAgBC,EAASC,GAE9BR,KAAKS,cAELT,KAAKU,SAAWhB,EAAEa,GAClBP,KAAKU,SAASN,OAEdJ,KAAKW,YAAiBH,GAAWA,EAAQX,UACzCG,KAAKY,gBAAkBL,EAAQM,aAAa,eAAiBb,KAAKU,SAASI,KAAK,eAAiB,GACjGd,KAAKe,UAAiBC,KAAKC,IAAI,EAAGjB,KAAKY,gBAAgBM,QAEvDlB,KAAKmB,WAAazB,EAAE,wCACpBM,KAAKoB,OAAY1B,EAAE,kDAAoDM,KAAKY,gBAAkB,OAAOS,SAASrB,KAAKmB,YACnHnB,KAAKsB,OAAYtB,KAAKU,SAASa,SAASC,KAAK,SAE7CxB,KAAKU,SAASe,OAAOzB,KAAKmB,YAC1BnB,KAAK0B,MAAMlB,GAEXR,KAAKsB,OAAOK,GAAG,QAAS,WAEpBjC,EAAEM,MAAM4B,SAAS,UACjBlC,EAAEM,MAAM4B,SAAS,WACjBlC,EAAEM,MAAM6B,KAAK,qBAAqBL,KAAK,eAAeM,UAG1D9B,KAAKoB,OAAOO,GAAG,QAAS,WAEpB,GAAII,GAAQrC,EAAEM,MAAMgC,QAAQ,qBAAqBT,SAASC,KAAK,QAC/D9B,GAAEM,MAAMgC,QAAQ,qBAAqBJ,SAAS,WAC7CG,EAAME,SAAS,YAAcF,EAAMH,SAAS,WAExCG,EAAME,SAAS,WAEhBF,EAAMH,SAAS,YAEpBD,GAAG,WAAY,WAEd,GAAIO,GAAkBxC,EAAEM,MAAMgC,QAAQ,qBAClCG,EAAkBD,EAAgBV,KAAK,YAC3CU,GAAgBE,YAAY,UAC5BF,EAAgBX,SAASC,KAAK,SAASY,YAAY,WAEhC,GAAfD,EAAKjB,QAAuC,GAAxBxB,EAAEM,MAAMqC,MAAMnB,QAElCgB,EAAgBX,SAASC,KAAK,SAASY,YAAY,YA+jB/D,QAASE,GAAuB9B,EAAS+B,GAErC,GAA4B,kBAAjB/B,GAAQ+B,GACnB,CACI,GAAIC,GAAehC,EAAQ+B,EAC3B/B,GAAQ+B,GAAU,SAAU3C,GAAQ,MAAOA,GAAK4C,KAIxD,QAASC,GAAmBjC,EAAS+B,GAEjC,GAA4B,kBAAjB/B,GAAQ+B,GACnB,CACI,GAAIG,GAAWlC,EAAQ+B,EACvB/B,GAAQ+B,GAAO,WAAc,MAAOG,KAS5C,QAASC,GAAWD,GAEhB,MAAIA,GAEOE,EAAoBC,KAAKH,GAAOI,OAIhC,GAWf,QAASC,GAAmBC,GAExB,GAAIC,GAAY,CAChB,IAAIC,SAASC,UACb,CACIH,EAAOlB,OACP,IAAIsB,GAAQF,SAASC,UAAUE,aAC/BD,GAAKE,UAAU,aAAcN,EAAON,MAAMxB,QAC1C+B,EAAYG,EAAKP,KAAK3B,YAEjB8B,EAAOO,gBAA2C,KAAzBP,EAAOO,kBAErCN,EAAYD,EAAOO,eAEvB,OAAO,GAYX,QAASC,GAAqBC,EAAcC,GAExC,GAAIC,IAAQ,CAsBZ,OArBAjE,GAAEkE,KAAKF,EAAY,SAAUG,EAAOC,GAEhC,GAAgC,gBAArB,IAAiCL,EAAaM,QAAUD,EAG/D,MADAH,IAAQ,GACD,CAGX,IAAIF,EAAaM,QAAUD,EAAeC,MAC1C,CACI,GAAIC,IAASF,EAAeG,eAAe,WAAaR,EAAaS,SAAWJ,EAAeI,OAC3FC,GAASL,EAAeG,eAAe,aAAeR,EAAaW,WAAaN,EAAeM,SAC/FC,GAASP,EAAeG,eAAe,YAAcR,EAAaa,UAAYR,EAAeQ,OACjG,IAAIN,GAAOG,GAASE,EAGhB,MADAV,IAAQ,GACD,KAKZA,EAlwBX,GAAIY,IACA5E,SAA8BA,EAC9BE,UAA8BA,EAC9BE,SAA8BA,EAC9BE,UAA8BA,EAC9BuE,WAA8B,EAC9BC,WAA8B,EAC9BC,YAA8BC,GAC9BC,aAA8BD,GAC9BE,aAA+B,EAAE,GAAI,GAAI,KACzC3E,YAA8BA,EAC9B4E,WAA8B,EAC9BC,iBAA8B,EAC9BC,uBAA8B,EAC9BC,uBAA8B,EAC9BC,oBAA8B,EAC9BC,qBAA8B,EAC9BC,YAA8B,EAC9BC,2BAA8B,EA0FlC/E,GAAgBgF,WACZC,YAAcjF,EAUdkF,IAAM,SAAU5F,EAAM6F,EAAajF,GAE/B,GAAIkF,GAAO1F,IAEX,MAAI0F,EAAKlF,QAAQkE,SAAWgB,EAAKjF,WAAWS,QAAUwE,EAAKlF,QAAQkE,YAMtD,IAAT9E,GAAmBA,GAAvB,CAkBA,GAZoB,gBAATA,IAAqB8F,EAAKlF,QAAQsE,YAEzClF,EAAOF,EAAEiG,KAAK/F,IAIE,gBAATA,IAAqB8F,EAAKlF,QAAQ6E,4BAEzCzF,EAAOA,EAAKgG,OAAO,GAAGC,cAAgBjG,EAAKkG,MAAM,IAIjC,gBAATlG,KAAsB8F,EAAK/E,YAElC,KAAK,oDAIT,KAAIf,EAAKE,WAAWiG,MAAM,SAA1B,CAKA,GAAoB,gBAATnG,IAAkD,UAA7BI,KAAKU,SAAS,GAAGsF,QACjD,CACI,GAAIC,GAAQrG,EAAKsG,MAAM,IACvB,IAAID,EAAM/E,OAAS,EACnB,CACI,IAAK,GAAIiF,GAAI,EAAGA,EAAIF,EAAM/E,OAAQiF,IAE9BnG,KAAKwF,IAAIS,EAAME,IAAI,EAOvB,aAJKV,GAEDC,EAAKU,YAMjB,GAAIvG,GAAY6F,EAAKlF,QAAQX,UAAUD,GACnCG,EAAY2F,EAAKlF,QAAQT,SAASH,GAClCD,EAAY+F,EAAKlF,QAAQb,SAASC,GAClCK,EAAYyF,EAAKlF,QAAQP,UAAUL,GAGnCyG,EAAW3G,EAAE4G,KAAKZ,EAAKjF,WAAY,SAAUb,GAAQ,MAAO8F,GAAKlF,QAAQX,UAAUD,KAAUC,IAAc,EAC/G,KAAIwG,GAAaX,EAAKlF,QAAQuE,iBAY9B,KAAIW,EAAKO,QAAQnG,WAAWoB,OAAStB,EAAKsB,OAAS,EAAIwE,EAAKlF,QAAQ+F,gBAApE,CAMA,GAAIC,GAAqB9G,EAAE+G,MAAM,iBAAkB7G,KAAOA,EAAM8G,QAAS,EAAOlG,QAAUA,GAE1F,IADAkF,EAAKhF,SAASiG,QAAQH,IAClBA,EAAmBE,OAAvB,CAMAhB,EAAKjF,WAAWmG,KAAKhH,EAGrB,IAAIO,GAAOT,EAAE,gBAAkBiD,EAAWhD,IAA2B,OAAdM,EAAsB,YAAcA,EAAa,IAAM,KAAO0C,EAAW5C,GAAY,gEAC5II,GAAK0G,KAAK,OAAQjH,GAClB8F,EAAKoB,mBAAmBrF,OAAOtB,GAC/BA,EAAK4G,MAAM,KAENtB,GAEDC,EAAKU,UAILV,EAAKlF,QAAQkE,UAAYgB,EAAKjF,WAAWS,QAAUwE,EAAKO,QAAQnG,WAAWoB,SAAWwE,EAAKlF,QAAQ+F,iBAEnGb,EAAKvE,WAAWS,SAAS,wBACzB8D,EAAKtE,OAAO4F,OACZtB,EAAKtE,OAAO6F,KAAK,YAAY,IAGjCvB,EAAKhF,SAASiG,QAAQjH,EAAE+G,MAAM,aAAc7G,KAAOA,EAAMY,QAAUA,WA5C/D,IAAIkF,EAAKlF,QAAQN,YACjB,CACI,GAAIgH,GAAexH,EAAE,OAAQgG,EAAKvE,YAAYgG,OAAO,WAAc,MAAOzH,GAAEM,MAAM6G,KAAK,UAAYR,GACnGX,GAAKlF,QAAQN,YAAYN,EAAMsH,OAoD3CE,OAAS,SAAUxH,EAAM6F,EAAajF,GAElC,GAAIkF,GAAO1F,IAgBX,IAdI0F,EAAK/E,cAIDf,EAFgB,gBAATA,GAEAF,EAAE4G,KAAKZ,EAAKjF,WAAY,SAAU4G,GAAS,MAAO3B,GAAKlF,QAAQX,UAAUwH,IAAU3B,EAAKlF,QAAQX,UAAUD,KAI1GF,EAAE4G,KAAKZ,EAAKjF,WAAY,SAAU4G,GAAS,MAAO3B,GAAKlF,QAAQX,UAAUwH,IAAUzH,IAG9FA,EAAOA,EAAKA,EAAKsB,OAAS,IAG1BtB,EACJ,CACI,GAAI0H,GAAwB5H,EAAE+G,MAAM,oBAChC7G,KAAUA,EACV8G,QAAU,EACVlG,QAAUA,GAGd,IADAkF,EAAKhF,SAASiG,QAAQW,GAClBA,EAAsBZ,OAEtB,MAGJhH,GAAE,QAASgG,EAAKvE,YAAYgG,OAAO,WAAc,MAAOzH,GAAEM,MAAM6G,KAAK,UAAYjH,IAASwH,UAEhD,IAAtC1H,EAAE6H,QAAQ3H,EAAM8F,EAAKjF,aAErBiF,EAAKjF,WAAW+G,OAAO9H,EAAE6H,QAAQ3H,EAAM8F,EAAKjF,YAAa,GAI5DgF,GAEDC,EAAKU,UAILV,EAAKlF,QAAQkE,QAAUgB,EAAKjF,WAAWS,SAEvCwE,EAAKvE,WAAWiB,YAAY,wBAC5BsD,EAAKtE,OAAO6F,KAAK,YAAY,IAIH,GAA1BvB,EAAKjF,WAAWS,QAChBwE,EAAKtE,OAAOqG,SAAS,SAASC,QAAQtF,YAAY,UAGtDsD,EAAKtE,OAAO4F,OACZtB,EAAKhF,SAASiG,QAAQjH,EAAE+G,MAAM,eAAgB7G,KAAOA,EAAMY,QAAUA,MAMzEmH,UAAY,WAER,GAAIjC,GAAO1F,IAIX,KAFAN,EAAE,QAASgG,EAAKvE,YAAYiG,SAErB1B,EAAKjF,WAAWS,OAAS,GAE5BwE,EAAKjF,WAAWmH,KAGpBlC,GAAKU,UACLV,EAAKvE,WAAWiB,YAAY,wBAC5BsD,EAAKtE,OAAOqG,SAAS,SAASC,QAAQtF,YAAY,UAClDsD,EAAKtE,OAAO6F,KAAK,YAAY,GAC7BvB,EAAKtE,OAAO4F,QAOhBa,QAAU,WAEN,GAAInC,GAAO1F,IACXN,GAAE,QAASgG,EAAKvE,YAAYyC,KAAK,WAE7B,GAAIzD,GAAcT,EAAEM,MAChBJ,EAAcO,EAAK0G,KAAK,QAExB9G,GADc2F,EAAKlF,QAAQX,UAAUD,GACvB8F,EAAKlF,QAAQT,SAASH,IACpCD,EAAc+F,EAAKlF,QAAQb,SAASC,EAGxCO,GAAKW,KAAK,QAAS,MACnBX,EAAKyB,SAAS,OAASe,EAAWhD,IAClCQ,EAAK2H,WAAWX,OAAO,WAEnB,MAAwB,IAAjBnH,KAAK+H,WACb,GAAGC,UAAYrF,EAAW5C,MAQrCkG,MAAQ,WAEJ,MAAOjG,MAAKS,YAOhB2F,QAAU,WAEN,GAAIV,GAAO1F,KACPqC,EAAO3C,EAAEuI,IAAIvC,EAAKO,QAAS,SAAUrG,GAEjC,MAAO8F,GAAKlF,QAAQX,UAAUD,GAAME,YAG5C4F,GAAKhF,SAAS2B,IAAIA,GAAK,GAAMsE,QAAQ,UACrCjB,EAAKtE,OAAO8G,UAAU,MAAO,KAQjCxG,MAAQ,SAAUlB,GAEd,GAAIkF,GAAO1F,IAeX,IAbA0F,EAAKlF,QAAUd,EAAEyI,UAAW5D,EAAgB/D,GAGxCkF,EAAK/E,cAEL+E,EAAKlF,QAAQgE,WAAY,GAG7BlC,EAAuBoD,EAAKlF,QAAS,aACrC8B,EAAuBoD,EAAKlF,QAAS,YACrCiC,EAAmBiD,EAAKlF,QAAS,YAG7BkF,EAAKlF,QAAQ4H,YACjB,CACI,GAAIC,GAAoB,KACpBC,KAGAF,EAAc1C,EAAKlF,QAAQ4H,WAC3B1I,GAAE6I,QAAQH,IAEVC,EAAoBD,EAAY,GAChCE,EAAoBF,EAAY,IAIhCE,EAAoBF,EAGxB1C,EAAKtE,OAAO8G,UAAUG,EAAiBC,GAAmB3G,GAAG,qBAAsBjC,EAAE8I,MAAM,SAAUC,EAAKC,GAElGJ,EAAkBK,SAElBjD,EAAKF,IAAIkD,EAAMJ,EAAkBK,WAIjCjD,EAAKF,IAAIkD,GAEbhD,EAAKtE,OAAO8G,UAAU,MAAO,KAC9BxC,IAGPA,EAAKvE,WAAWQ,GAAG,QAASjC,EAAE8I,MAAM,SAAUI,GAErClD,EAAKhF,SAASI,KAAK,aAEpB4E,EAAKtE,OAAOyH,WAAW,YAE3BnD,EAAKtE,OAAOU,SACb4D,IAECA,EAAKlF,QAAQiE,WAAaiB,EAAKlF,QAAQgE,WAEvCkB,EAAKtE,OAAOO,GAAG,WAAYjC,EAAE8I,MAAM,SAAUI,GAEzClD,EAAKF,IAAIE,EAAKtE,OAAOiB,QAEtBqD,IAGPA,EAAKvE,WAAWQ,GAAG,UAAW,QAASjC,EAAE8I,MAAM,SAAUI,GAErD,GAAIxH,GAAgB1B,EAAEkJ,EAAME,QACxBC,EAAgBrD,EAAKoB,kBAEzB,IAAIpB,EAAKhF,SAASI,KAAK,YAGnB,WADA4E,GAAKtE,OAAON,KAAK,WAAY,WAIjC,QAAQ8H,EAAM7E,OAGV,IAAK,GACD,GAAI2B,EAAKlF,QAAQwE,uBAA2D,IAAlCjC,EAAmB3B,EAAO,IACpE,CACI,GAAI4H,GAAOD,EAAcC,MACrBA,IAEAtD,EAAK0B,OAAO4B,EAAKnC,KAAK,SAG9B,KAGJ,KAAK,IACD,GAAInB,EAAKlF,QAAQyE,uBAA2D,IAAlClC,EAAmB3B,EAAO,IACpE,CACI,GAAIS,GAAOkH,EAAclH,MACrBA,IAEA6D,EAAK0B,OAAOvF,EAAKgF,KAAK,SAG9B,KAGJ,KAAK,IAED,GAAIoC,GAAWF,EAAcC,MACzBtD,GAAKlF,QAAQ0E,oBAA8C,IAAxB9D,EAAOiB,MAAMnB,QAAgB+H,EAAS,KAEzEA,EAASxH,OAAOsH,GAChB3H,EAAOU,QAEX,MAEJ,KAAK,IAED,GAAIoH,GAAWH,EAAclH,MACzB6D,GAAKlF,QAAQ2E,qBAA+C,IAAxB/D,EAAOiB,MAAMnB,QAAgBgI,EAAS,KAE1EA,EAASnC,MAAMgC,GACf3H,EAAOU,SAQnB,GAAIqH,GAAa/H,EAAOiB,MAAMnB,MACbF,MAAKoI,KAAKD,EAAa,EAExC/H,GAAON,KAAK,OAAQE,KAAKC,IAAIjB,KAAKe,UAAWK,EAAOiB,MAAMnB,UAC3DwE,IAEHA,EAAKvE,WAAWQ,GAAG,UAAW,QAASjC,EAAE8I,MAAM,SAAUI,GAErD,GAAIxH,GAAS1B,EAAEkJ,EAAME,OAErB,IAAIpD,EAAKhF,SAASI,KAAK,YAGnB,WADA4E,GAAKtE,OAAON,KAAK,WAAY,WAIjC,IAAI+B,GAAkBzB,EAAOiB,MACzBgH,EAAmB3D,EAAKlF,QAAQoE,UAAY/B,EAAK3B,QAAUwE,EAAKlF,QAAQoE,QACxEc,GAAKlF,QAAQgE,YAAchB,EAAqBoF,EAAOlD,EAAKlF,QAAQqE,cAAgBwE,KAEpF3D,EAAKF,IAAI6D,EAAmBxG,EAAKyG,OAAO,EAAG5D,EAAKlF,QAAQoE,UAAY/B,GACpEzB,EAAOiB,IAAI,IACVqD,EAAKtE,OAAgB,WAAKsE,EAAKtE,OAAO8G,UAAU,MAAM,IACvDU,EAAMW,iBAIV,IAAIJ,GAAa/H,EAAOiB,MAAMnB,MACbF,MAAKoI,KAAKD,EAAa,EAExC/H,GAAON,KAAK,OAAQE,KAAKC,IAAIjB,KAAKe,UAAWK,EAAOiB,MAAMnB,UAC3DwE,IAGHA,EAAKvE,WAAWQ,GAAG,QAAS,qBAAsBjC,EAAE8I,MAAM,SAAUI,GAE5DlD,EAAKhF,SAASI,KAAK,aAIvB4E,EAAK0B,OAAO1H,EAAEkJ,EAAME,QAAQU,QAAQ,SAAS3C,KAAK,UACnDnB,IAGCA,EAAKlF,QAAQX,YAAc0E,EAAe1E,WAET,UAA7B6F,EAAKhF,SAAS,GAAGsF,SAEjBN,EAAKF,IAAIE,EAAKhF,SAAS2B,QAQnCoH,QAAU,WAEN,GAAI/D,GAAO1F,IAGX0F,GAAKvE,WAAWuI,IAAI,UAAW,SAC/BhE,EAAKvE,WAAWuI,IAAI,QAAS,iBAE7BhE,EAAKvE,WAAWiG,SAChB1B,EAAKhF,SAASiJ,WAAW,gBACzBjE,EAAKhF,SAASkJ,QAMlB9H,MAAQ,WAEJ9B,KAAKoB,OAAOU,SAMhB+H,MAAQ,WAEJ,MAAO7J,MAAKoB,QAOhB0F,iBAAmB,WAIf,IAFA,GAAIgD,GAAW9J,KAAKoB,OAAO,GACvB2I,EAAY/J,KAAKmB,WAAW,GACzB2I,GAAOA,EAAIE,aAAeD,GAE7BD,EAAMA,EAAIE,UAGd,OAAOtK,GAAEoK,KAYjBpK,EAAEuK,GAAGC,aAAe,SAAUC,EAAMC,EAAMC,GAEtC,GAAIC,KAuCJ,OArCAtK,MAAK4D,KAAK,WAEN,GAAIsG,GAAexK,EAAEM,MAAM6G,KAAK,eAEhC,IAAKqD,EASA,GAAKC,GAASC,GAMd,OAA2BzF,KAAvBuF,EAAaC,GACtB,CAEI,GAAkC,IAA9BD,EAAaC,GAAMjJ,YAAyByD,KAAT0F,EAEnC,GAAIE,GAASL,EAAaC,GAAMC,EAAM,KAAMC,OAI5C,IAAIE,GAASL,EAAaC,GAAMC,OAErBzF,KAAX4F,GAEAD,EAAQ1D,KAAK2D,QAfjBD,GAAQ1D,KAAKsD,OAXbA,GAAe,GAAI5J,GAAgBN,KAAMmK,GACzCzK,EAAEM,MAAM6G,KAAK,eAAgBqD,GAC7BI,EAAQ1D,KAAKsD,GAGbxK,EAAEM,MAAMqC,IAAI3C,EAAEM,MAAMqC,SA0BT,gBAAR8H,GAGAG,EAAQpJ,OAAS,EAAIoJ,EAAUA,EAAQ,GAIvCA,GAIf5K,EAAEuK,GAAGC,aAAaM,SAAWjG,EAC7B7E,EAAEuK,GAAGC,aAAaO,YAAcnK,CA+BhC,IAAIsC,GAAsBlD,EAAE,UA8E5BA,GAAE,WAEEA,EAAE,iCAAiCwK,kBAExCQ,OAAOC","file":"materialize-tags.min.js","sourcesContent":["(function ($)\n{\n    \"use strict\";\n\n    /**\n    * Default Configuration\n    *\n    * @type {{tagClass: tagClass, itemValue: itemValue, itemText: itemText, itemTitle: itemTitle, freeInput: boolean, addOnBlur: boolean, maxTags: undefined, maxChars: undefined, confirmKeys: number[], onTagExists: onTagExists, trimValue: boolean, allowDuplicates: boolean}}\n    */\n    var defaultOptions = {\n        tagClass                    : tagClass,\n        itemValue                   : itemValue,\n        itemText                    : itemText,\n        itemTitle                   : itemTitle,\n        freeInput                   : true,\n        addOnBlur                   : true,\n        maxTags                     : undefined,\n        maxChars                    : undefined,\n        confirmKeys                 : [9,13, 44, 188],\n        onTagExists                 : onTagExists,\n        trimValue                   : true,\n        allowDuplicates             : false,\n        deleteTagsOnBackspace       : true,\n        deleteTagsOnDeleteKey       : true,\n        MoveTagOnLeftArrow          : true,\n        MoveTagOnRightArrow         : true,\n        autoselect                  : false,\n        CapitalizeFirstLetterOnly   : false,\n    };\n\n\n    function tagClass(item)\n    {\n        return 'chip';\n    }\n\n    function itemValue(item)\n    {\n        return item ? item.toString() : item;\n    }\n\n    function itemText(item)\n    {\n        return this.itemValue(item);\n    }\n\n    function itemTitle(item)\n    {\n        return null;\n    }\n\n    function onTagExists(item, $tag)\n    {\n        $tag.hide().fadeIn();\n    }\n\n    function selectFirstSuggestion(){\n        $('.tt-suggestion.tt-selectable').first().addClass('tt-cursor');\n        console.log($('.tt-suggestion.tt-selectable'));\n    }\n\n    /**\n    * Constructor function\n    *\n    * @param element\n    * @param options\n    * @constructor\n    */\n    function TagsMaterialize(element, options)\n    {\n        this.itemsArray = [];\n\n        this.$element = $(element);\n        this.$element.hide();\n\n        this.objectItems    = options && options.itemValue;\n        this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n        this.inputSize      = Math.max(1, this.placeholderText.length);\n\n        this.$container = $('<div class=\"materialize-tags\"></div>');\n        this.$input    = $('<input type=\"text\" class=\"n-tag\"  placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n        this.$label    = this.$element.parent().find('label');\n\n        this.$element.before(this.$container);\n        this.build(options);\n\n        this.$label.on('click', function ()\n        {\n            $(this).addClass('active');\n            $(this).addClass('infocus');\n            $(this).next('.materialize-tags').find('input.n-tag').focus();\n        });\n\n        this.$input.on('focus', function ()\n        {\n            var label = $(this).parents('.materialize-tags').parent().find('label');\n            $(this).parents('.materialize-tags').addClass('active');\n            !label.hasClass('infocus') && label.addClass('infocus');\n\n            if (!label.hasClass('active'))\n            {\n                label.addClass('active');\n            }\n        }).on('focusout', function ()\n        {\n            var parentContainer = $(this).parents('.materialize-tags'),\n                tags            = parentContainer.find('span.chip');\n            parentContainer.removeClass('active');\n            parentContainer.parent().find('label').removeClass('infocus');\n            // Verify if is empty and remove \"active\" class from label\n            if (tags.length == 0 && $(this).val().length == 0)\n            {\n                parentContainer.parent().find('label').removeClass('active');\n            }\n        });\n    }\n\n    TagsMaterialize.prototype = {\n        constructor : TagsMaterialize,\n\n        /**\n        * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n        * updating the elements val()\n        *\n        * @param item\n        * @param dontPushVal\n        * @param options\n        */\n        add : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\n            {\n                return;\n            }\n\n            // Ignore false values, except false\n            if (item !== false && !item)\n            {\n                return;\n            }\n\n            // Trim value\n            if (typeof item === \"string\" && self.options.trimValue)\n            {\n                item = $.trim(item);\n            }\n\n            // CapitalizeFirstLetter\n            if (typeof item === \"string\" && self.options.CapitalizeFirstLetterOnly)\n            {\n                item = item.charAt(0).toUpperCase() + item.slice(1);\n            }\n\n            // Throw an error when trying to add an object while the itemValue option was not set\n            if (typeof item === \"object\" && !self.objectItems)\n            {\n                throw(\"Can't add objects when itemValue option is not set\");\n            }\n\n            // Ignore strings only contain whitespace\n            if (item.toString().match(/^\\s*$/))\n            {\n                return;\n            }\n\n            if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT')\n            {\n                var items = item.split(',');\n                if (items.length > 1)\n                {\n                    for (var i = 0; i < items.length; i++)\n                    {\n                        this.add(items[i], true);\n                    }\n\n                    if (!dontPushVal)\n                    {\n                        self.pushVal();\n                    }\n                    return;\n                }\n            }\n\n            var itemValue = self.options.itemValue(item),\n                itemText  = self.options.itemText(item),\n                tagClass  = self.options.tagClass(item),\n                itemTitle = self.options.itemTitle(item);\n\n            // Ignore items all ready added\n            var existing = $.grep(self.itemsArray, function (item) { return self.options.itemValue(item) === itemValue; })[0];\n            if (existing && !self.options.allowDuplicates)\n            {\n                // Invoke onTagExists\n                if (self.options.onTagExists)\n                {\n                    var $existingTag = $(\".tag\", self.$container).filter(function () { return $(this).data(\"item\") === existing; });\n                    self.options.onTagExists(item, $existingTag);\n                }\n                return;\n            }\n\n            // if length greater than limit\n            if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\n            {\n                return;\n            }\n\n            // raise beforeItemAdd arg\n            var beforeItemAddEvent = $.Event('beforeItemAdd', {item : item, cancel : false, options : options});\n            self.$element.trigger(beforeItemAddEvent);\n            if (beforeItemAddEvent.cancel)\n            {\n                return;\n            }\n\n            // register item in internal array and map\n            self.itemsArray.push(item);\n\n            // add a tag element\n            var $tag = $('<span class=\"' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<i class=\"material-icons\" data-role=\"remove\">close</i></span>');\n            $tag.data('item', item);\n            self.findInputWrapper().before($tag);\n            $tag.after(' ');\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Add class when reached maxTags\n            if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\n            {\n                self.$container.addClass('materialize-tags-max');\n                self.$input.blur();\n                self.$input.prop('readOnly', true);\n            }\n\n            self.$element.trigger($.Event('itemAdded', {item : item, options : options}));\n        },\n\n        /**\n        * Removes the given item. Pass true to dontPushVal to prevent updating the\n        * elements val()\n        *\n        * @param item\n        * @param dontPushVal\n        * @param options\n        */\n        remove : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.objectItems)\n            {\n                if (typeof item === \"object\")\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == self.options.itemValue(item); });\n                }\n                else\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == item; });\n                }\n\n                item = item[item.length - 1];\n            }\n\n            if (item)\n            {\n                var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\n                    item    : item,\n                    cancel  : false,\n                    options : options\n                });\n                self.$element.trigger(beforeItemRemoveEvent);\n                if (beforeItemRemoveEvent.cancel)\n                {\n                    return;\n                }\n\n                $('.chip', self.$container).filter(function () { return $(this).data('item') === item; }).remove();\n\n                if ($.inArray(item, self.itemsArray) !== -1)\n                {\n                    self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n                }\n            }\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Remove class when reached maxTags\n            if (self.options.maxTags > self.itemsArray.length)\n            {\n                self.$container.removeClass('materialize-tags-max');\n                self.$input.prop('readOnly', false);\n            }\n\n            // Remove active class when reached 0 tags\n            if (self.itemsArray.length == 0){\n                self.$input.siblings(\"label\").first().removeClass('active');\n            }\n\n            self.$input.blur();\n            self.$element.trigger($.Event('itemRemoved', {item : item, options : options}));\n        },\n\n        /**\n        * Removes all items\n        */\n        removeAll : function ()\n        {\n            var self = this;\n\n            $('.chip', self.$container).remove();\n\n            while (self.itemsArray.length > 0)\n            {\n                self.itemsArray.pop();\n            }\n\n            self.pushVal();\n            self.$container.removeClass('materialize-tags-max');\n            self.$input.siblings(\"label\").first().removeClass('active');\n            self.$input.prop('readOnly', false);\n            self.$input.blur();\n        },\n\n        /**\n        * Refreshes the tags so they match the text/value of their corresponding\n        * item.\n        */\n        refresh : function ()\n        {\n            var self = this;\n            $('.chip', self.$container).each(function ()\n            {\n                var $tag        = $(this),\n                    item        = $tag.data('item'),\n                    itemValue   = self.options.itemValue(item),\n                    itemText    = self.options.itemText(item),\n                    tagClass    = self.options.tagClass(item);\n\n                // Update tag's class and inner text\n                $tag.attr('class', null);\n                $tag.addClass('tag ' + htmlEncode(tagClass));\n                $tag.contents().filter(function ()\n                {\n                    return this.nodeType == 3;\n                })[0].nodeValue = htmlEncode(itemText);\n\n            });\n        },\n\n        /**\n        * Returns the items added as tags\n        */\n        items : function ()\n        {\n            return this.itemsArray;\n        },\n\n        /**\n        * Assembly value by retrieving the value of each item, and set it on the\n        * element.\n        */\n        pushVal : function ()\n        {\n            var self = this,\n                val  = $.map(self.items(), function (item)\n                {\n                    return self.options.itemValue(item).toString();\n                });\n\n            self.$element.val(val, true).trigger('change');\n            self.$input.typeahead('val', '');\n        },\n\n        /**\n        * Initializes the tags input behaviour on the element\n        *\n        * @param options\n        */\n        build : function (options)\n        {\n            var self = this;\n\n            self.options = $.extend({}, defaultOptions, options);\n            // When itemValue is set, freeInput should always be false\n\n            if (self.objectItems)\n            {\n                self.options.freeInput = false;\n            }\n\n            makeOptionItemFunction(self.options, 'itemValue');\n            makeOptionItemFunction(self.options, 'itemText');\n            makeOptionFunction(self.options, 'tagClass');\n\n            // Typeahead.js\n            if (self.options.typeaheadjs)\n            {\n                var typeaheadConfig   = null;\n                var typeaheadDatasets = {};\n\n                // Determine if main configurations were passed or simply a dataset\n                var typeaheadjs = self.options.typeaheadjs;\n                if ($.isArray(typeaheadjs))\n                {\n                    typeaheadConfig   = typeaheadjs[0];\n                    typeaheadDatasets = typeaheadjs[1];\n                }\n                else\n                {\n                    typeaheadDatasets = typeaheadjs;\n                }\n\n                self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum)\n                {\n                    if (typeaheadDatasets.valueKey)\n                    {\n                        self.add(datum[typeaheadDatasets.valueKey]);\n                    }\n                    else\n                    {\n                        self.add(datum);\n                    }\n                    self.$input.typeahead('val', '');\n                }, self));\n            }\n\n            self.$container.on('click', $.proxy(function (event)\n            {\n                if (!self.$element.attr('disabled'))\n                {\n                    self.$input.removeAttr('disabled');\n                }\n                self.$input.focus();\n            }, self));\n\n            if (self.options.addOnBlur && self.options.freeInput)\n            {\n                self.$input.on('focusout', $.proxy(function (event)\n                {\n                    self.add(self.$input.val());\n\n                }, self));\n            }\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input        = $(event.target),\n                    $inputWrapper = self.findInputWrapper();\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                switch (event.which)\n                {\n                    // BACKSPACE\n                    case 8:\n                        if (self.options.deleteTagsOnBackspace && doGetCaretPosition($input[0]) === 0)\n                        {\n                            var prev = $inputWrapper.prev();\n                            if (prev)\n                            {\n                                self.remove(prev.data('item'));\n                            }\n                        }\n                        break;\n\n                    // DELETE\n                    case 46:\n                        if (self.options.deleteTagsOnDeleteKey && doGetCaretPosition($input[0]) === 0)\n                        {\n                            var next = $inputWrapper.next();\n                            if (next)\n                            {\n                                self.remove(next.data('item'));\n                            }\n                        }\n                        break;\n\n                    // LEFT ARROW\n                    case 37:\n                        // Try to move the input before the previous tag\n                        var $prevTag = $inputWrapper.prev();\n                        if (self.options.MoveTagOnLeftArrow && $input.val().length === 0 && $prevTag[0])\n                        {\n                            $prevTag.before($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    // RIGHT ARROW\n                    case 39:\n                        // Try to move the input after the next tag\n                        var $nextTag = $inputWrapper.next();\n                        if (self.options.MoveTagOnRightArrow && $input.val().length === 0 && $nextTag[0])\n                        {\n                            $nextTag.after($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    default:\n                    // ignore\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input = $(event.target);\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                var text            = $input.val(),\n                    maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n                if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached))\n                {\n                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n                    $input.val('');\n                    (self.$input.typeahead) && self.$input.typeahead(\"val\",\"\");\n                    event.preventDefault();\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size      = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            // Remove icon clicked\n            self.$container.on('click', '[data-role=remove]', $.proxy(function (event)\n            {\n                if (self.$element.attr('disabled'))\n                {\n                    return;\n                }\n                self.remove($(event.target).closest('.chip').data('item'));\n            }, self));\n\n            // Only add existing value as tags when using strings as tags\n            if (self.options.itemValue === defaultOptions.itemValue)\n            {\n                if (self.$element[0].tagName === 'INPUT')\n                {\n                    self.add(self.$element.val());\n                }\n            }\n        },\n\n        /**\n        * Removes all materialtags behaviour and unregsiter all event handlers\n        */\n        destroy : function ()\n        {\n            var self = this;\n\n            // Unbind events\n            self.$container.off('keydown', 'input');\n            self.$container.off('click', '[role=remove]');\n\n            self.$container.remove();\n            self.$element.removeData('materialtags');\n            self.$element.show();\n        },\n\n        /**\n        * Sets focus on the materialtags\n        */\n        focus : function ()\n        {\n            this.$input.focus();\n        },\n\n        /**\n        * Returns the internal input element\n        */\n        input : function ()\n        {\n            return this.$input;\n        },\n\n        /**\n        * Returns the element which is wrapped around the internal input. This\n        * is normally the $container, but typeahead.js moves the $input element.\n        */\n        findInputWrapper : function ()\n        {\n            var elt      = this.$input[0],\n                container = this.$container[0];\n            while (elt && elt.parentNode !== container)\n            {\n                elt = elt.parentNode;\n            }\n\n            return $(elt);\n        }\n    };\n\n    /**\n    * Register JQuery plugin\n    *\n    * @param arg1\n    * @param arg2\n    * @param arg3\n    * @returns {Array}\n    */\n    $.fn.materialtags = function (arg1, arg2, arg3)\n    {\n        var results = [];\n\n        this.each(function ()\n        {\n            var materialtags = $(this).data('materialtags');\n            // Initialize a new material tags input\n            if (!materialtags)\n            {\n                materialtags = new TagsMaterialize(this, arg1);\n                $(this).data('materialtags', materialtags);\n                results.push(materialtags);\n\n                // Init tags from $(this).val()\n                $(this).val($(this).val());\n            }\n            else if (!arg1 && !arg2)\n            {\n                // materialtags already exists\n                // no function, trying to init\n                results.push(materialtags);\n            }\n            else if (materialtags[arg1] !== undefined)\n            {\n                // Invoke function on existing tags input\n                if (materialtags[arg1].length === 3 && arg3 !== undefined)\n                {\n                    var retVal = materialtags[arg1](arg2, null, arg3);\n                }\n                else\n                {\n                    var retVal = materialtags[arg1](arg2);\n                }\n                if (retVal !== undefined)\n                {\n                    results.push(retVal);\n                }\n            }\n        });\n\n        if (typeof arg1 == 'string')\n        {\n            // Return the results from the invoked function calls\n            return results.length > 1 ? results : results[0];\n        }\n        else\n        {\n            return results;\n        }\n    };\n\n    $.fn.materialtags.defaults = defaultOptions;\n    $.fn.materialtags.Constructor = TagsMaterialize;\n\n    /**\n    * Most options support both a string or number as well as a function as\n    * option value. This function makes sure that the option with the given\n    * key in the given options is wrapped in a function\n    *\n    * @param options\n    * @param key\n    */\n    function makeOptionItemFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var propertyName = options[key];\n            options[key]    = function (item) { return item[propertyName]; };\n        }\n    }\n\n    function makeOptionFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var value    = options[key];\n            options[key] = function () { return value; };\n        }\n    }\n\n    /**\n    * HtmlEncodes the given value\n    */\n    var htmlEncodeContainer = $('<div />');\n\n    function htmlEncode(value)\n    {\n        if (value)\n        {\n            return htmlEncodeContainer.text(value).html();\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n    /**\n    * Returns the position of the caret in the given input field\n    * http://flightschool.acylt.com/devnotes/caret-position-woes/\n    *\n    * @param oField\n    * @returns {number}\n    */\n    function doGetCaretPosition(oField)\n    {\n        var iCaretPos = 0;\n        if (document.selection)\n        {\n            oField.focus();\n            var oSel  = document.selection.createRange();\n            oSel.moveStart('character', -oField.value.length);\n            iCaretPos = oSel.text.length;\n        }\n        else if (oField.selectionStart || oField.selectionStart == '0')\n        {\n            iCaretPos = oField.selectionStart;\n        }\n        return (iCaretPos);\n    }\n\n    /**\n    * Returns boolean indicates whether user has pressed an expected key combination.\n    * http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n    * [13, {which: 188, shiftKey: true}]\n    *\n    * @param keyDownEvent\n    * @param lookupList\n    * @returns {boolean}\n    */\n    function keyCombinationInList(keyDownEvent, lookupList)\n    {\n        var found = false;\n        $.each(lookupList, function (index, keyCombination)\n        {\n            if (typeof (keyCombination) === 'number' && keyDownEvent.which === keyCombination)\n            {\n                found = true;\n                return false;\n            }\n\n            if (keyDownEvent.which === keyCombination.which)\n            {\n                var alt   = !keyCombination.hasOwnProperty('altKey') || keyDownEvent.altKey === keyCombination.altKey,\n                    shift = !keyCombination.hasOwnProperty('shiftKey') || keyDownEvent.shiftKey === keyCombination.shiftKey,\n                    ctrl  = !keyCombination.hasOwnProperty('ctrlKey') || keyDownEvent.ctrlKey === keyCombination.ctrlKey;\n                if (alt && shift && ctrl)\n                {\n                    found = true;\n                    return false;\n                }\n            }\n        });\n\n        return found;\n    }\n\n    /**\n    * Initialize materialtags behaviour on inputs which have\n    * data-role=materialtags\n    */\n    $(function ()\n    {\n        $(\"input[data-role=materialtags]\").materialtags();\n    });\n})(window.jQuery);\n"]}